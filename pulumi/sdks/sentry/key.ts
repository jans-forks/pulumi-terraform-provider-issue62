// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/key:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    /**
     * This is a map of DSN values. The keys include `public`, `secret`, `csp`, `security`, `minidump`, `nel`, `unreal`, `cdn`,
     * and `crons`.
     */
    public /*out*/ readonly dsn!: pulumi.Output<{[key: string]: string}>;
    /**
     * Security header endpoint for features like CSP and Expect-CT reports. **Deprecated** Use `dsn["csp"]` instead.
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly dsnCsp!: pulumi.Output<string>;
    /**
     * The DSN tells the SDK where to send the events to. **Deprecated** Use `dsn["public"]` instead.
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly dsnPublic!: pulumi.Output<string>;
    /**
     * Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use,
     * follow installation instructions for your language. **Deprecated** Use `dsn["secret"] instead.
     *
     * @deprecated Deprecated
     */
    public /*out*/ readonly dsnSecret!: pulumi.Output<string>;
    /**
     * The JavaScript loader script configuration.
     */
    public readonly javascriptLoaderScript!: pulumi.Output<outputs.KeyJavascriptLoaderScript>;
    /**
     * The name of the client key.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization of this resource.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The project of this resource.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The ID of the project that the key belongs to.
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * The public key.
     */
    public /*out*/ readonly public!: pulumi.Output<string>;
    /**
     * Number of events that can be reported within the rate limit window.
     */
    public readonly rateLimitCount!: pulumi.Output<number>;
    /**
     * Length of time in seconds that will be considered when checking the rate limit.
     */
    public readonly rateLimitWindow!: pulumi.Output<number>;
    /**
     * The secret key.
     */
    public /*out*/ readonly secret!: pulumi.Output<string>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyState | undefined;
            resourceInputs["dsn"] = state ? state.dsn : undefined;
            resourceInputs["dsnCsp"] = state ? state.dsnCsp : undefined;
            resourceInputs["dsnPublic"] = state ? state.dsnPublic : undefined;
            resourceInputs["dsnSecret"] = state ? state.dsnSecret : undefined;
            resourceInputs["javascriptLoaderScript"] = state ? state.javascriptLoaderScript : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["rateLimitCount"] = state ? state.rateLimitCount : undefined;
            resourceInputs["rateLimitWindow"] = state ? state.rateLimitWindow : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["javascriptLoaderScript"] = args ? args.javascriptLoaderScript : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["rateLimitCount"] = args ? args.rateLimitCount : undefined;
            resourceInputs["rateLimitWindow"] = args ? args.rateLimitWindow : undefined;
            resourceInputs["dsn"] = undefined /*out*/;
            resourceInputs["dsnCsp"] = undefined /*out*/;
            resourceInputs["dsnPublic"] = undefined /*out*/;
            resourceInputs["dsnSecret"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
            resourceInputs["secret"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Key.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    /**
     * This is a map of DSN values. The keys include `public`, `secret`, `csp`, `security`, `minidump`, `nel`, `unreal`, `cdn`,
     * and `crons`.
     */
    dsn?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Security header endpoint for features like CSP and Expect-CT reports. **Deprecated** Use `dsn["csp"]` instead.
     *
     * @deprecated Deprecated
     */
    dsnCsp?: pulumi.Input<string>;
    /**
     * The DSN tells the SDK where to send the events to. **Deprecated** Use `dsn["public"]` instead.
     *
     * @deprecated Deprecated
     */
    dsnPublic?: pulumi.Input<string>;
    /**
     * Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use,
     * follow installation instructions for your language. **Deprecated** Use `dsn["secret"] instead.
     *
     * @deprecated Deprecated
     */
    dsnSecret?: pulumi.Input<string>;
    /**
     * The JavaScript loader script configuration.
     */
    javascriptLoaderScript?: pulumi.Input<inputs.KeyJavascriptLoaderScript>;
    /**
     * The name of the client key.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization of this resource.
     */
    organization?: pulumi.Input<string>;
    /**
     * The project of this resource.
     */
    project?: pulumi.Input<string>;
    /**
     * The ID of the project that the key belongs to.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The public key.
     */
    public?: pulumi.Input<string>;
    /**
     * Number of events that can be reported within the rate limit window.
     */
    rateLimitCount?: pulumi.Input<number>;
    /**
     * Length of time in seconds that will be considered when checking the rate limit.
     */
    rateLimitWindow?: pulumi.Input<number>;
    /**
     * The secret key.
     */
    secret?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    /**
     * The JavaScript loader script configuration.
     */
    javascriptLoaderScript?: pulumi.Input<inputs.KeyJavascriptLoaderScript>;
    /**
     * The name of the client key.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization of this resource.
     */
    organization: pulumi.Input<string>;
    /**
     * The project of this resource.
     */
    project: pulumi.Input<string>;
    /**
     * Number of events that can be reported within the rate limit window.
     */
    rateLimitCount?: pulumi.Input<number>;
    /**
     * Length of time in seconds that will be considered when checking the rate limit.
     */
    rateLimitWindow?: pulumi.Input<number>;
}
