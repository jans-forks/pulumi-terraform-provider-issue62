// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DashboardWidget {
    displayType: pulumi.Input<string>;
    /**
     * The ID of the widget.
     */
    id?: pulumi.Input<string>;
    interval?: pulumi.Input<string>;
    layout: pulumi.Input<inputs.DashboardWidgetLayout>;
    limit?: pulumi.Input<number>;
    queries: pulumi.Input<pulumi.Input<inputs.DashboardWidgetQuery>[]>;
    title: pulumi.Input<string>;
    widgetType?: pulumi.Input<string>;
}

export interface DashboardWidgetLayout {
    h: pulumi.Input<number>;
    minH: pulumi.Input<number>;
    w: pulumi.Input<number>;
    x: pulumi.Input<number>;
    y: pulumi.Input<number>;
}

export interface DashboardWidgetQuery {
    aggregates?: pulumi.Input<pulumi.Input<string>[]>;
    columns?: pulumi.Input<pulumi.Input<string>[]>;
    conditions?: pulumi.Input<string>;
    fieldAliases?: pulumi.Input<pulumi.Input<string>[]>;
    fields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the query.
     */
    id?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    orderBy?: pulumi.Input<string>;
}

export interface IssueAlertActionsV2 {
    /**
     * Create an Azure DevOps work item in `integration`.
     */
    azureDevopsCreateTicket?: pulumi.Input<inputs.IssueAlertActionsV2AzureDevopsCreateTicket>;
    /**
     * Send a notification to the `server` Discord server in the channel with ID or URL: `channel_id` and show tags `tags` in the notification.
     */
    discordNotifyService?: pulumi.Input<inputs.IssueAlertActionsV2DiscordNotifyService>;
    /**
     * Create a GitHub issue in `integration`.
     */
    githubCreateTicket?: pulumi.Input<inputs.IssueAlertActionsV2GithubCreateTicket>;
    /**
     * Create a GitHub Enterprise issue in `integration`.
     */
    githubEnterpriseCreateTicket?: pulumi.Input<inputs.IssueAlertActionsV2GithubEnterpriseCreateTicket>;
    /**
     * Create a Jira issue in `integration`.
     */
    jiraCreateTicket?: pulumi.Input<inputs.IssueAlertActionsV2JiraCreateTicket>;
    /**
     * Create a Jira Server issue in `integration`.
     */
    jiraServerCreateTicket?: pulumi.Input<inputs.IssueAlertActionsV2JiraServerCreateTicket>;
    /**
     * Send a notification to the `team` Team to `channel`.
     */
    msteamsNotifyService?: pulumi.Input<inputs.IssueAlertActionsV2MsteamsNotifyService>;
    /**
     * Send a notification to `target_type` and if none can be found then send a notification to `fallthrough_type`.
     */
    notifyEmail?: pulumi.Input<inputs.IssueAlertActionsV2NotifyEmail>;
    /**
     * Send a notification to all legacy integrations.
     */
    notifyEvent?: pulumi.Input<inputs.IssueAlertActionsV2NotifyEvent>;
    /**
     * Send a notification to a Sentry app.
     */
    notifyEventSentryApp?: pulumi.Input<inputs.IssueAlertActionsV2NotifyEventSentryApp>;
    /**
     * Send a notification via an integration.
     */
    notifyEventService?: pulumi.Input<inputs.IssueAlertActionsV2NotifyEventService>;
    /**
     * Send a notification to Opsgenie account `account` and team `team` with `priority` priority.
     */
    opsgenieNotifyTeam?: pulumi.Input<inputs.IssueAlertActionsV2OpsgenieNotifyTeam>;
    /**
     * Send a notification to PagerDuty account `account` and service `service` with `severity` severity.
     */
    pagerdutyNotifyService?: pulumi.Input<inputs.IssueAlertActionsV2PagerdutyNotifyService>;
    /**
     * Send a notification to the `workspace` Slack workspace to `channel` (optionally, an ID: `channel_id`) and show tags `tags` and notes `notes` in notification.
     */
    slackNotifyService?: pulumi.Input<inputs.IssueAlertActionsV2SlackNotifyService>;
}

export interface IssueAlertActionsV2AzureDevopsCreateTicket {
    /**
     * The integration ID.
     */
    integration: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The ID of the Azure DevOps project.
     */
    project: pulumi.Input<string>;
    /**
     * The type of work item to create.
     */
    workItemType: pulumi.Input<string>;
}

export interface IssueAlertActionsV2DiscordNotifyService {
    /**
     * The ID of the channel to send the notification to. You must enter either a channel ID or a channel URL, not a channel name
     */
    channelId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The integration ID associated with the Discord server.
     */
    server: pulumi.Input<string>;
    /**
     * A string of tags to show in the notification.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IssueAlertActionsV2GithubCreateTicket {
    /**
     * The GitHub user to assign the issue to.
     */
    assignee?: pulumi.Input<string>;
    /**
     * The integration ID associated with GitHub.
     */
    integration: pulumi.Input<string>;
    /**
     * A list of labels to assign to the issue.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * The name of the repository to create the issue in.
     */
    repo: pulumi.Input<string>;
}

export interface IssueAlertActionsV2GithubEnterpriseCreateTicket {
    /**
     * The GitHub user to assign the issue to.
     */
    assignee?: pulumi.Input<string>;
    /**
     * The integration ID associated with GitHub Enterprise.
     */
    integration: pulumi.Input<string>;
    /**
     * A list of labels to assign to the issue.
     */
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * The name of the repository to create the issue in.
     */
    repo: pulumi.Input<string>;
}

export interface IssueAlertActionsV2JiraCreateTicket {
    /**
     * The integration ID associated with Jira.
     */
    integration: pulumi.Input<string>;
    /**
     * The ID of the type of issue that the ticket should be created as.
     */
    issueType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The ID of the Jira project.
     */
    project: pulumi.Input<string>;
}

export interface IssueAlertActionsV2JiraServerCreateTicket {
    /**
     * The integration ID associated with Jira Server.
     */
    integration: pulumi.Input<string>;
    /**
     * The ID of the type of issue that the ticket should be created as.
     */
    issueType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The ID of the Jira Server project.
     */
    project: pulumi.Input<string>;
}

export interface IssueAlertActionsV2MsteamsNotifyService {
    /**
     * The name of the channel to send the notification to.
     */
    channel: pulumi.Input<string>;
    channelId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The integration ID associated with the Microsoft Teams team.
     */
    team: pulumi.Input<string>;
}

export interface IssueAlertActionsV2NotifyEmail {
    /**
     * Who the notification should be sent to if there are no suggested assignees. Valid values are: `AllMembers`, `ActiveMembers`, and `NoOne`.
     */
    fallthroughType?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * The ID of the Member or Team the notification should be sent to. Only required when `target_type` is `Team` or `Member`.
     */
    targetIdentifier?: pulumi.Input<string>;
    /**
     * Valid values are: `IssueOwners`, `Team`, and `Member`.
     */
    targetType: pulumi.Input<string>;
}

export interface IssueAlertActionsV2NotifyEvent {
    name?: pulumi.Input<string>;
}

export interface IssueAlertActionsV2NotifyEventSentryApp {
    name?: pulumi.Input<string>;
    sentryAppInstallationUuid: pulumi.Input<string>;
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface IssueAlertActionsV2NotifyEventService {
    name?: pulumi.Input<string>;
    service: pulumi.Input<string>;
}

export interface IssueAlertActionsV2OpsgenieNotifyTeam {
    account: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority: pulumi.Input<string>;
    team: pulumi.Input<string>;
}

export interface IssueAlertActionsV2PagerdutyNotifyService {
    account: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    service: pulumi.Input<string>;
    severity: pulumi.Input<string>;
}

export interface IssueAlertActionsV2SlackNotifyService {
    /**
     * The name of the channel to send the notification to (e.g., #critical, Jane Schmidt).
     */
    channel: pulumi.Input<string>;
    /**
     * The ID of the channel to send the notification to.
     */
    channelId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Text to show alongside the notification. To @ a user, include their user id like `@<USER_ID>`. To include a clickable link, format the link and title like `<http://example.com|Click Here>`.
     */
    notes?: pulumi.Input<string>;
    /**
     * A string of tags to show in the notification.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The integration ID associated with the Slack workspace.
     */
    workspace: pulumi.Input<string>;
}

export interface IssueAlertConditionsV2 {
    /**
     * When the `comparison_type` is `count`, the number of events in an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the number of events in an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventFrequency?: pulumi.Input<inputs.IssueAlertConditionsV2EventFrequency>;
    /**
     * When the `comparison_type` is `count`, the percent of sessions affected by an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the percent of sessions affected by an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventFrequencyPercent?: pulumi.Input<inputs.IssueAlertConditionsV2EventFrequencyPercent>;
    /**
     * When the `comparison_type` is `count`, the number of users affected by an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the number of users affected by an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventUniqueUserFrequency?: pulumi.Input<inputs.IssueAlertConditionsV2EventUniqueUserFrequency>;
    /**
     * Sentry marks an existing issue as high priority.
     */
    existingHighPriorityIssue?: pulumi.Input<inputs.IssueAlertConditionsV2ExistingHighPriorityIssue>;
    /**
     * A new issue is created.
     */
    firstSeenEvent?: pulumi.Input<inputs.IssueAlertConditionsV2FirstSeenEvent>;
    /**
     * Sentry marks a new issue as high priority.
     */
    newHighPriorityIssue?: pulumi.Input<inputs.IssueAlertConditionsV2NewHighPriorityIssue>;
    /**
     * The issue changes state from ignored to unresolved.
     */
    reappearedEvent?: pulumi.Input<inputs.IssueAlertConditionsV2ReappearedEvent>;
    /**
     * The issue changes state from resolved to unresolved.
     */
    regressionEvent?: pulumi.Input<inputs.IssueAlertConditionsV2RegressionEvent>;
}

export interface IssueAlertConditionsV2EventFrequency {
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    comparisonInterval?: pulumi.Input<string>;
    /**
     * Valid values are: `count`, and `percent`.
     */
    comparisonType: pulumi.Input<string>;
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `1m`, `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    interval?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface IssueAlertConditionsV2EventFrequencyPercent {
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    comparisonInterval?: pulumi.Input<string>;
    /**
     * Valid values are: `count`, and `percent`.
     */
    comparisonType: pulumi.Input<string>;
    /**
     * `m` for minutes, `h` for hours. Valid values are: `5m`, `10m`, `30m`, and `1h`.
     */
    interval: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface IssueAlertConditionsV2EventUniqueUserFrequency {
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    comparisonInterval?: pulumi.Input<string>;
    /**
     * Valid values are: `count`, and `percent`.
     */
    comparisonType: pulumi.Input<string>;
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `1m`, `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    interval?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface IssueAlertConditionsV2ExistingHighPriorityIssue {
    name?: pulumi.Input<string>;
}

export interface IssueAlertConditionsV2FirstSeenEvent {
    name?: pulumi.Input<string>;
}

export interface IssueAlertConditionsV2NewHighPriorityIssue {
    name?: pulumi.Input<string>;
}

export interface IssueAlertConditionsV2ReappearedEvent {
    name?: pulumi.Input<string>;
}

export interface IssueAlertConditionsV2RegressionEvent {
    name?: pulumi.Input<string>;
}

export interface IssueAlertFiltersV2 {
    /**
     * The issue is older or newer than `value` `time`.
     */
    ageComparison?: pulumi.Input<inputs.IssueAlertFiltersV2AgeComparison>;
    /**
     * The issue is assigned to no one, team, or member.
     */
    assignedTo?: pulumi.Input<inputs.IssueAlertFiltersV2AssignedTo>;
    /**
     * The event's `attribute` value `match` `value`.
     */
    eventAttribute?: pulumi.Input<inputs.IssueAlertFiltersV2EventAttribute>;
    /**
     * The issue's category is equal to `value`.
     */
    issueCategory?: pulumi.Input<inputs.IssueAlertFiltersV2IssueCategory>;
    /**
     * The issue has happened at least `value` times (Note: this is approximate).
     */
    issueOccurrences?: pulumi.Input<inputs.IssueAlertFiltersV2IssueOccurrences>;
    /**
     * The {oldest_or_newest} adopted release associated with the event's issue is {older_or_newer} than the latest adopted release in {environment}.
     */
    latestAdoptedRelease?: pulumi.Input<inputs.IssueAlertFiltersV2LatestAdoptedRelease>;
    /**
     * The event is from the latest release.
     */
    latestRelease?: pulumi.Input<inputs.IssueAlertFiltersV2LatestRelease>;
    /**
     * The event's level is `match` `level`.
     */
    level?: pulumi.Input<inputs.IssueAlertFiltersV2Level>;
    /**
     * The event's tags match `key` `match` `value`.
     */
    taggedEvent?: pulumi.Input<inputs.IssueAlertFiltersV2TaggedEvent>;
}

export interface IssueAlertFiltersV2AgeComparison {
    /**
     * Valid values are: `older`, and `newer`.
     */
    comparisonType: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Valid values are: `minute`, `hour`, `day`, and `week`.
     */
    time: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface IssueAlertFiltersV2AssignedTo {
    name?: pulumi.Input<string>;
    /**
     * The target's ID. Only required when `target_type` is `Team` or `Member`.
     */
    targetIdentifier?: pulumi.Input<string>;
    /**
     * Valid values are: `Unassigned`, `Team`, and `Member`.
     */
    targetType: pulumi.Input<string>;
}

export interface IssueAlertFiltersV2EventAttribute {
    /**
     * Valid values are: `message`, `platform`, `environment`, `type`, `error.handled`, `error.unhandled`, `error.main_thread`, `exception.type`, `exception.value`, `user.id`, `user.email`, `user.username`, `user.ip_address`, `http.method`, `http.url`, `http.status_code`, `sdk.name`, `stacktrace.code`, `stacktrace.module`, `stacktrace.filename`, `stacktrace.abs_path`, `stacktrace.package`, `unreal.crashtype`, `app.in_foreground`, `os.distribution_name`, and `os.distribution_version`.
     */
    attribute: pulumi.Input<string>;
    /**
     * The comparison operator. Valid values are: `CONTAINS`, `ENDS_WITH`, `EQUAL`, `GREATER_OR_EQUAL`, `GREATER`, `IS_SET`, `IS_IN`, `LESS_OR_EQUAL`, `LESS`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUAL`, `NOT_SET`, `NOT_STARTS_WITH`, `NOT_IN`, and `STARTS_WITH`.
     */
    match: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface IssueAlertFiltersV2IssueCategory {
    name?: pulumi.Input<string>;
    /**
     * Valid values are: `Error`, `Performance`, `Profile`, `Cron`, `Replay`, `Feedback`, `Uptime`, and `Metric_Alert`.
     */
    value: pulumi.Input<string>;
}

export interface IssueAlertFiltersV2IssueOccurrences {
    name?: pulumi.Input<string>;
    value: pulumi.Input<number>;
}

export interface IssueAlertFiltersV2LatestAdoptedRelease {
    environment: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    /**
     * Valid values are: `older`, and `newer`.
     */
    olderOrNewer: pulumi.Input<string>;
    /**
     * Valid values are: `oldest`, and `newest`.
     */
    oldestOrNewest: pulumi.Input<string>;
}

export interface IssueAlertFiltersV2LatestRelease {
    name?: pulumi.Input<string>;
}

export interface IssueAlertFiltersV2Level {
    /**
     * Valid values are: `sample`, `debug`, `info`, `warning`, `error`, and `fatal`.
     */
    level: pulumi.Input<string>;
    /**
     * The comparison operator. Valid values are: `EQUAL`, `GREATER_OR_EQUAL`, and `LESS_OR_EQUAL`.
     */
    match: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface IssueAlertFiltersV2TaggedEvent {
    /**
     * The tag.
     */
    key: pulumi.Input<string>;
    /**
     * The comparison operator. Valid values are: `CONTAINS`, `ENDS_WITH`, `EQUAL`, `GREATER_OR_EQUAL`, `GREATER`, `IS_SET`, `IS_IN`, `LESS_OR_EQUAL`, `LESS`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUAL`, `NOT_SET`, `NOT_STARTS_WITH`, `NOT_IN`, and `STARTS_WITH`.
     */
    match: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface KeyJavascriptLoaderScript {
    /**
     * The version of the browser SDK to load.
     */
    browserSdkVersion?: pulumi.Input<string>;
    /**
     * Whether debug bundles & logging are enabled for this key.
     */
    debugEnabled?: pulumi.Input<boolean>;
    /**
     * Whether performance monitoring is enabled for this key.
     */
    performanceMonitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Whether session replay is enabled for this key.
     */
    sessionReplayEnabled?: pulumi.Input<boolean>;
}

export interface MetricAlertTrigger {
    actions: pulumi.Input<pulumi.Input<inputs.MetricAlertTriggerAction>[]>;
    alertThreshold: pulumi.Input<number>;
    /**
     * The ID of the trigger.
     */
    id?: pulumi.Input<string>;
    label: pulumi.Input<string>;
    resolveThreshold?: pulumi.Input<number>;
    thresholdType: pulumi.Input<number>;
}

export interface MetricAlertTriggerAction {
    /**
     * The ID of the action.
     */
    id?: pulumi.Input<string>;
    /**
     * Slack channel ID to avoid rate-limiting, see [here](https://docs.sentry.io/product/integrations/notification-incidents/slack/#rate-limiting-error)
     */
    inputChannelId?: pulumi.Input<string>;
    integrationId?: pulumi.Input<number>;
    targetIdentifier?: pulumi.Input<string>;
    targetType: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ProjectClientSecurity {
    /**
     * A list of allowed domains. Examples: https://example.com, *, *.example.com, *:80.
     */
    allowedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable JavaScript source fetching. Allow Sentry to scrape missing JavaScript source context when possible.
     */
    scrapeJavascript?: pulumi.Input<boolean>;
    /**
     * Security Token. Outbound requests matching Allowed Domains will have the header "{security_token_header}: {security_token}" appended.
     */
    securityToken?: pulumi.Input<string>;
    /**
     * Security Token Header. Outbound requests matching Allowed Domains will have the header "{security_token_header}: {security_token}" appended.
     */
    securityTokenHeader?: pulumi.Input<string>;
    /**
     * Verify TLS/SSL. Outbound requests will verify TLS (sometimes known as SSL) connections.
     */
    verifyTlsSsl?: pulumi.Input<boolean>;
}

export interface ProjectFilters {
    /**
     * Filter events from these IP addresses. (e.g. 127.0.0.1 or 10.0.0.0/8)
     */
    blacklistedIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter events by error messages. Allows [glob pattern matching](https://en.wikipedia.org/wiki/Glob_(programming)). (e.g. TypeError* or *: integer division or modulo by zero)
     */
    errorMessages?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Filter events from these releases. Allows [glob pattern matching](https://en.wikipedia.org/wiki/Glob_(programming)). (e.g. 1.* or [!3].[0-9].*)
     */
    releases?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProjectSymbolSourceLayout {
    /**
     * The casing of the symbol source layout. The layout of the folder structure. The options are: `default` - Default (mixed case), `uppercase` - Uppercase, `lowercase` - Lowercase.
     */
    casing: pulumi.Input<string>;
    /**
     * The layout of the folder structure. The options are: `native` - Platform-Specific (SymStore / GDB / LLVM), `symstore` - Microsoft SymStore, `symstore_index2` - Microsoft SymStore (with index2.txt), `ssqp` - Microsoft SSQP, `unified` - Unified Symbol Server Layout, `debuginfod` - debuginfod.
     */
    type: pulumi.Input<string>;
}
