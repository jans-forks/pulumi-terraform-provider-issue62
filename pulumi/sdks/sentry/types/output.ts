// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DashboardWidget {
    displayType: string;
    /**
     * The ID of the widget.
     */
    id: string;
    interval: string;
    layout: outputs.DashboardWidgetLayout;
    limit: number;
    queries: outputs.DashboardWidgetQuery[];
    title: string;
    widgetType: string;
}

export interface DashboardWidgetLayout {
    h: number;
    minH: number;
    w: number;
    x: number;
    y: number;
}

export interface DashboardWidgetQuery {
    aggregates: string[];
    columns: string[];
    conditions: string;
    fieldAliases: string[];
    fields: string[];
    /**
     * The ID of the query.
     */
    id: string;
    name?: string;
    orderBy: string;
}

export interface GetAllKeysKey {
    /**
     * This is a map of DSN values. The keys include `public`, `secret`, `csp`, `security`, `minidump`, `nel`, `unreal`, `cdn`, and `crons`.
     */
    dsn: {[key: string]: string};
    /**
     * Security header endpoint for features like CSP and Expect-CT reports. **Deprecated** Use `dsn["csp"]` instead.
     *
     * @deprecated Deprecated
     */
    dsnCsp: string;
    /**
     * The DSN tells the SDK where to send the events to. **Deprecated** Use `dsn["public"]` instead.
     *
     * @deprecated Deprecated
     */
    dsnPublic: string;
    /**
     * Deprecated DSN includes a secret which is no longer required by newer SDK versions. If you are unsure which to use, follow installation instructions for your language. **Deprecated** Use `dsn["secret"] instead.
     *
     * @deprecated Deprecated
     */
    dsnSecret: string;
    /**
     * The ID of this resource.
     */
    id: string;
    /**
     * The JavaScript loader script configuration.
     */
    javascriptLoaderScript: outputs.GetAllKeysKeyJavascriptLoaderScript;
    /**
     * The name of the client key.
     */
    name: string;
    /**
     * The slug of the organization the resource belongs to.
     */
    organization: string;
    /**
     * The slug of the project the resource belongs to.
     */
    project: string;
    /**
     * The ID of the project that the key belongs to.
     */
    projectId: string;
    /**
     * The public key.
     */
    public: string;
    /**
     * Number of events that can be reported within the rate limit window.
     */
    rateLimitCount: number;
    /**
     * Length of time in seconds that will be considered when checking the rate limit.
     */
    rateLimitWindow: number;
    /**
     * The secret key.
     */
    secret: string;
}

export interface GetAllKeysKeyJavascriptLoaderScript {
    /**
     * The version of the browser SDK to load.
     */
    browserSdkVersion: string;
    /**
     * Whether debug bundles & logging are enabled for this key.
     */
    debugEnabled: boolean;
    /**
     * Whether performance monitoring is enabled for this key.
     */
    performanceMonitoringEnabled: boolean;
    /**
     * Whether session replay is enabled for this key.
     */
    sessionReplayEnabled: boolean;
}

export interface GetAllOrganizationMembersMember {
    /**
     * The email of the organization member.
     */
    email: string;
    /**
     * The ID of of the organization member.
     */
    id: string;
    /**
     * This is the role of the organization member.
     */
    role: string;
}

export interface GetAllProjectsProject {
    /**
     * The color of this project.
     */
    color: string;
    /**
     * The date this project was created.
     */
    dateCreated: string;
    /**
     * The features of this project.
     */
    features: string[];
    /**
     * The internal ID of this project.
     */
    internalId: string;
    /**
     * The name of this project.
     */
    name: string;
    /**
     * The platform of this project.
     */
    platform: string;
    /**
     * The slug of this project.
     */
    slug: string;
}

export interface GetDashboardWidget {
    displayType: string;
    id: string;
    interval: string;
    layouts: outputs.GetDashboardWidgetLayout[];
    limit: number;
    queries: outputs.GetDashboardWidgetQuery[];
    title: string;
    widgetType: string;
}

export interface GetDashboardWidgetLayout {
    h: number;
    minH: number;
    w: number;
    x: number;
    y: number;
}

export interface GetDashboardWidgetQuery {
    aggregates: string[];
    columns: string[];
    conditions: string;
    fieldAliases: string[];
    fields: string[];
    id: string;
    name: string;
    orderBy: string;
}

export interface GetIssueAlertActionsV2 {
    /**
     * Create an Azure DevOps work item in `integration`.
     */
    azureDevopsCreateTicket: outputs.GetIssueAlertActionsV2AzureDevopsCreateTicket;
    /**
     * Send a notification to the `server` Discord server in the channel with ID or URL: `channel_id` and show tags `tags` in the notification.
     */
    discordNotifyService: outputs.GetIssueAlertActionsV2DiscordNotifyService;
    /**
     * Create a GitHub issue in `integration`.
     */
    githubCreateTicket: outputs.GetIssueAlertActionsV2GithubCreateTicket;
    /**
     * Create a GitHub Enterprise issue in `integration`.
     */
    githubEnterpriseCreateTicket: outputs.GetIssueAlertActionsV2GithubEnterpriseCreateTicket;
    /**
     * Create a Jira issue in `integration`.
     */
    jiraCreateTicket: outputs.GetIssueAlertActionsV2JiraCreateTicket;
    /**
     * Create a Jira Server issue in `integration`.
     */
    jiraServerCreateTicket: outputs.GetIssueAlertActionsV2JiraServerCreateTicket;
    /**
     * Send a notification to the `team` Team to `channel`.
     */
    msteamsNotifyService: outputs.GetIssueAlertActionsV2MsteamsNotifyService;
    /**
     * Send a notification to `target_type` and if none can be found then send a notification to `fallthrough_type`.
     */
    notifyEmail: outputs.GetIssueAlertActionsV2NotifyEmail;
    /**
     * Send a notification to all legacy integrations.
     */
    notifyEvent: outputs.GetIssueAlertActionsV2NotifyEvent;
    /**
     * Send a notification to a Sentry app.
     */
    notifyEventSentryApp: outputs.GetIssueAlertActionsV2NotifyEventSentryApp;
    /**
     * Send a notification via an integration.
     */
    notifyEventService: outputs.GetIssueAlertActionsV2NotifyEventService;
    /**
     * Send a notification to Opsgenie account `account` and team `team` with `priority` priority.
     */
    opsgenieNotifyTeam: outputs.GetIssueAlertActionsV2OpsgenieNotifyTeam;
    /**
     * Send a notification to PagerDuty account `account` and service `service` with `severity` severity.
     */
    pagerdutyNotifyService: outputs.GetIssueAlertActionsV2PagerdutyNotifyService;
    /**
     * Send a notification to the `workspace` Slack workspace to `channel` (optionally, an ID: `channel_id`) and show tags `tags` and notes `notes` in notification.
     */
    slackNotifyService: outputs.GetIssueAlertActionsV2SlackNotifyService;
}

export interface GetIssueAlertActionsV2AzureDevopsCreateTicket {
    integration: string;
    name: string;
    workItemType: string;
}

export interface GetIssueAlertActionsV2DiscordNotifyService {
    channelId: string;
    name: string;
    server: string;
    tags: string[];
}

export interface GetIssueAlertActionsV2GithubCreateTicket {
    assignee: string;
    integration: string;
    labels: string[];
    name: string;
    repo: string;
}

export interface GetIssueAlertActionsV2GithubEnterpriseCreateTicket {
    assignee: string;
    integration: string;
    labels: string[];
    name: string;
    repo: string;
}

export interface GetIssueAlertActionsV2JiraCreateTicket {
    integration: string;
    issueType: string;
    name: string;
    project: string;
}

export interface GetIssueAlertActionsV2JiraServerCreateTicket {
    integration: string;
    issueType: string;
    name: string;
    project: string;
}

export interface GetIssueAlertActionsV2MsteamsNotifyService {
    channel: string;
    channelId: string;
    name: string;
    team: string;
}

export interface GetIssueAlertActionsV2NotifyEmail {
    fallthroughType: string;
    name: string;
    targetIdentifier: string;
    targetType: string;
}

export interface GetIssueAlertActionsV2NotifyEvent {
    name: string;
}

export interface GetIssueAlertActionsV2NotifyEventSentryApp {
    name: string;
    sentryAppInstallationUuid: string;
    settings: {[key: string]: string};
}

export interface GetIssueAlertActionsV2NotifyEventService {
    name: string;
    service: string;
}

export interface GetIssueAlertActionsV2OpsgenieNotifyTeam {
    account: string;
    name: string;
    priority: string;
    team: string;
}

export interface GetIssueAlertActionsV2PagerdutyNotifyService {
    account: string;
    name: string;
    service: string;
    severity: string;
}

export interface GetIssueAlertActionsV2SlackNotifyService {
    channel: string;
    channelId: string;
    name: string;
    notes: string;
    tags: string[];
    workspace: string;
}

export interface GetIssueAlertConditionsV2 {
    /**
     * When the `comparison_type` is `count`, the number of events in an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the number of events in an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventFrequency: outputs.GetIssueAlertConditionsV2EventFrequency;
    /**
     * When the `comparison_type` is `count`, the percent of sessions affected by an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the percent of sessions affected by an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventFrequencyPercent: outputs.GetIssueAlertConditionsV2EventFrequencyPercent;
    /**
     * When the `comparison_type` is `count`, the number of users affected by an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the number of users affected by an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventUniqueUserFrequency: outputs.GetIssueAlertConditionsV2EventUniqueUserFrequency;
    /**
     * Sentry marks an existing issue as high priority.
     */
    existingHighPriorityIssue: outputs.GetIssueAlertConditionsV2ExistingHighPriorityIssue;
    /**
     * A new issue is created.
     */
    firstSeenEvent: outputs.GetIssueAlertConditionsV2FirstSeenEvent;
    /**
     * Sentry marks a new issue as high priority.
     */
    newHighPriorityIssue: outputs.GetIssueAlertConditionsV2NewHighPriorityIssue;
    /**
     * The issue changes state from ignored to unresolved.
     */
    reappearedEvent: outputs.GetIssueAlertConditionsV2ReappearedEvent;
    /**
     * The issue changes state from resolved to unresolved.
     */
    regressionEvent: outputs.GetIssueAlertConditionsV2RegressionEvent;
}

export interface GetIssueAlertConditionsV2EventFrequency {
    comparisonInterval: string;
    comparisonType: string;
    interval: string;
    name: string;
    value: number;
}

export interface GetIssueAlertConditionsV2EventFrequencyPercent {
    comparisonInterval: string;
    comparisonType: string;
    interval: string;
    name: string;
    value: number;
}

export interface GetIssueAlertConditionsV2EventUniqueUserFrequency {
    comparisonInterval: string;
    comparisonType: string;
    interval: string;
    name: string;
    value: number;
}

export interface GetIssueAlertConditionsV2ExistingHighPriorityIssue {
    name: string;
}

export interface GetIssueAlertConditionsV2FirstSeenEvent {
    name: string;
}

export interface GetIssueAlertConditionsV2NewHighPriorityIssue {
    name: string;
}

export interface GetIssueAlertConditionsV2ReappearedEvent {
    name: string;
}

export interface GetIssueAlertConditionsV2RegressionEvent {
    name: string;
}

export interface GetIssueAlertFiltersV2 {
    /**
     * The issue is older or newer than `value` `time`.
     */
    ageComparison: outputs.GetIssueAlertFiltersV2AgeComparison;
    /**
     * The issue is assigned to no one, team, or member.
     */
    assignedTo: outputs.GetIssueAlertFiltersV2AssignedTo;
    /**
     * The event's `attribute` value `match` `value`.
     */
    eventAttribute: outputs.GetIssueAlertFiltersV2EventAttribute;
    /**
     * The issue's category is equal to `value`.
     */
    issueCategory: outputs.GetIssueAlertFiltersV2IssueCategory;
    /**
     * The issue has happened at least `value` times (Note: this is approximate).
     */
    issueOccurrences: outputs.GetIssueAlertFiltersV2IssueOccurrences;
    /**
     * The {oldest_or_newest} adopted release associated with the event's issue is {older_or_newer} than the latest adopted release in {environment}.
     */
    latestAdoptedRelease: outputs.GetIssueAlertFiltersV2LatestAdoptedRelease;
    /**
     * The event is from the latest release.
     */
    latestRelease: outputs.GetIssueAlertFiltersV2LatestRelease;
    /**
     * The event's level is `match` `level`.
     */
    level: outputs.GetIssueAlertFiltersV2Level;
    /**
     * The event's tags match `key` `match` `value`.
     */
    taggedEvent: outputs.GetIssueAlertFiltersV2TaggedEvent;
}

export interface GetIssueAlertFiltersV2AgeComparison {
    comparisonType: string;
    name: string;
    time: string;
    value: number;
}

export interface GetIssueAlertFiltersV2AssignedTo {
    name: string;
    targetIdentifier: number;
    targetType: number;
}

export interface GetIssueAlertFiltersV2EventAttribute {
    attribute: string;
    match: string;
    name: string;
    value: string;
}

export interface GetIssueAlertFiltersV2IssueCategory {
    name: string;
    value: string;
}

export interface GetIssueAlertFiltersV2IssueOccurrences {
    name: string;
    value: number;
}

export interface GetIssueAlertFiltersV2LatestAdoptedRelease {
    environment: number;
    name: string;
    olderOrNewer: number;
    oldestOrNewest: number;
}

export interface GetIssueAlertFiltersV2LatestRelease {
    name: string;
}

export interface GetIssueAlertFiltersV2Level {
    level: string;
    match: string;
    name: string;
}

export interface GetIssueAlertFiltersV2TaggedEvent {
    key: string;
    match: string;
    name: string;
    value: string;
}

export interface GetKeyJavascriptLoaderScript {
    /**
     * The version of the browser SDK to load.
     */
    browserSdkVersion: string;
    /**
     * Whether debug bundles & logging are enabled for this key.
     */
    debugEnabled: boolean;
    /**
     * Whether performance monitoring is enabled for this key.
     */
    performanceMonitoringEnabled: boolean;
    /**
     * Whether session replay is enabled for this key.
     */
    sessionReplayEnabled: boolean;
}

export interface GetMetricAlertTrigger {
    actions: outputs.GetMetricAlertTriggerAction[];
    alertThreshold: number;
    id: string;
    label: string;
    resolveThreshold: number;
    thresholdType: number;
}

export interface GetMetricAlertTriggerAction {
    id: string;
    inputChannelId: string;
    integrationId: number;
    targetIdentifier: string;
    targetType: string;
    type: string;
}

export interface IssueAlertActionsV2 {
    /**
     * Create an Azure DevOps work item in `integration`.
     */
    azureDevopsCreateTicket?: outputs.IssueAlertActionsV2AzureDevopsCreateTicket;
    /**
     * Send a notification to the `server` Discord server in the channel with ID or URL: `channel_id` and show tags `tags` in the notification.
     */
    discordNotifyService?: outputs.IssueAlertActionsV2DiscordNotifyService;
    /**
     * Create a GitHub issue in `integration`.
     */
    githubCreateTicket?: outputs.IssueAlertActionsV2GithubCreateTicket;
    /**
     * Create a GitHub Enterprise issue in `integration`.
     */
    githubEnterpriseCreateTicket?: outputs.IssueAlertActionsV2GithubEnterpriseCreateTicket;
    /**
     * Create a Jira issue in `integration`.
     */
    jiraCreateTicket?: outputs.IssueAlertActionsV2JiraCreateTicket;
    /**
     * Create a Jira Server issue in `integration`.
     */
    jiraServerCreateTicket?: outputs.IssueAlertActionsV2JiraServerCreateTicket;
    /**
     * Send a notification to the `team` Team to `channel`.
     */
    msteamsNotifyService?: outputs.IssueAlertActionsV2MsteamsNotifyService;
    /**
     * Send a notification to `target_type` and if none can be found then send a notification to `fallthrough_type`.
     */
    notifyEmail?: outputs.IssueAlertActionsV2NotifyEmail;
    /**
     * Send a notification to all legacy integrations.
     */
    notifyEvent?: outputs.IssueAlertActionsV2NotifyEvent;
    /**
     * Send a notification to a Sentry app.
     */
    notifyEventSentryApp?: outputs.IssueAlertActionsV2NotifyEventSentryApp;
    /**
     * Send a notification via an integration.
     */
    notifyEventService?: outputs.IssueAlertActionsV2NotifyEventService;
    /**
     * Send a notification to Opsgenie account `account` and team `team` with `priority` priority.
     */
    opsgenieNotifyTeam?: outputs.IssueAlertActionsV2OpsgenieNotifyTeam;
    /**
     * Send a notification to PagerDuty account `account` and service `service` with `severity` severity.
     */
    pagerdutyNotifyService?: outputs.IssueAlertActionsV2PagerdutyNotifyService;
    /**
     * Send a notification to the `workspace` Slack workspace to `channel` (optionally, an ID: `channel_id`) and show tags `tags` and notes `notes` in notification.
     */
    slackNotifyService?: outputs.IssueAlertActionsV2SlackNotifyService;
}

export interface IssueAlertActionsV2AzureDevopsCreateTicket {
    /**
     * The integration ID.
     */
    integration: string;
    name: string;
    /**
     * The ID of the Azure DevOps project.
     */
    project: string;
    /**
     * The type of work item to create.
     */
    workItemType: string;
}

export interface IssueAlertActionsV2DiscordNotifyService {
    /**
     * The ID of the channel to send the notification to. You must enter either a channel ID or a channel URL, not a channel name
     */
    channelId: string;
    name: string;
    /**
     * The integration ID associated with the Discord server.
     */
    server: string;
    /**
     * A string of tags to show in the notification.
     */
    tags?: string[];
}

export interface IssueAlertActionsV2GithubCreateTicket {
    /**
     * The GitHub user to assign the issue to.
     */
    assignee?: string;
    /**
     * The integration ID associated with GitHub.
     */
    integration: string;
    /**
     * A list of labels to assign to the issue.
     */
    labels?: string[];
    name: string;
    /**
     * The name of the repository to create the issue in.
     */
    repo: string;
}

export interface IssueAlertActionsV2GithubEnterpriseCreateTicket {
    /**
     * The GitHub user to assign the issue to.
     */
    assignee?: string;
    /**
     * The integration ID associated with GitHub Enterprise.
     */
    integration: string;
    /**
     * A list of labels to assign to the issue.
     */
    labels?: string[];
    name: string;
    /**
     * The name of the repository to create the issue in.
     */
    repo: string;
}

export interface IssueAlertActionsV2JiraCreateTicket {
    /**
     * The integration ID associated with Jira.
     */
    integration: string;
    /**
     * The ID of the type of issue that the ticket should be created as.
     */
    issueType: string;
    name: string;
    /**
     * The ID of the Jira project.
     */
    project: string;
}

export interface IssueAlertActionsV2JiraServerCreateTicket {
    /**
     * The integration ID associated with Jira Server.
     */
    integration: string;
    /**
     * The ID of the type of issue that the ticket should be created as.
     */
    issueType: string;
    name: string;
    /**
     * The ID of the Jira Server project.
     */
    project: string;
}

export interface IssueAlertActionsV2MsteamsNotifyService {
    /**
     * The name of the channel to send the notification to.
     */
    channel: string;
    channelId: string;
    name: string;
    /**
     * The integration ID associated with the Microsoft Teams team.
     */
    team: string;
}

export interface IssueAlertActionsV2NotifyEmail {
    /**
     * Who the notification should be sent to if there are no suggested assignees. Valid values are: `AllMembers`, `ActiveMembers`, and `NoOne`.
     */
    fallthroughType?: string;
    name: string;
    /**
     * The ID of the Member or Team the notification should be sent to. Only required when `target_type` is `Team` or `Member`.
     */
    targetIdentifier?: string;
    /**
     * Valid values are: `IssueOwners`, `Team`, and `Member`.
     */
    targetType: string;
}

export interface IssueAlertActionsV2NotifyEvent {
    name: string;
}

export interface IssueAlertActionsV2NotifyEventSentryApp {
    name: string;
    sentryAppInstallationUuid: string;
    settings?: {[key: string]: string};
}

export interface IssueAlertActionsV2NotifyEventService {
    name: string;
    service: string;
}

export interface IssueAlertActionsV2OpsgenieNotifyTeam {
    account: string;
    name: string;
    priority: string;
    team: string;
}

export interface IssueAlertActionsV2PagerdutyNotifyService {
    account: string;
    name: string;
    service: string;
    severity: string;
}

export interface IssueAlertActionsV2SlackNotifyService {
    /**
     * The name of the channel to send the notification to (e.g., #critical, Jane Schmidt).
     */
    channel: string;
    /**
     * The ID of the channel to send the notification to.
     */
    channelId: string;
    name: string;
    /**
     * Text to show alongside the notification. To @ a user, include their user id like `@<USER_ID>`. To include a clickable link, format the link and title like `<http://example.com|Click Here>`.
     */
    notes?: string;
    /**
     * A string of tags to show in the notification.
     */
    tags?: string[];
    /**
     * The integration ID associated with the Slack workspace.
     */
    workspace: string;
}

export interface IssueAlertConditionsV2 {
    /**
     * When the `comparison_type` is `count`, the number of events in an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the number of events in an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventFrequency?: outputs.IssueAlertConditionsV2EventFrequency;
    /**
     * When the `comparison_type` is `count`, the percent of sessions affected by an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the percent of sessions affected by an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventFrequencyPercent?: outputs.IssueAlertConditionsV2EventFrequencyPercent;
    /**
     * When the `comparison_type` is `count`, the number of users affected by an issue is more than `value` in `interval`. When the `comparison_type` is `percent`, the number of users affected by an issue is `value` % higher in `interval` compared to `comparison_interval` ago.
     */
    eventUniqueUserFrequency?: outputs.IssueAlertConditionsV2EventUniqueUserFrequency;
    /**
     * Sentry marks an existing issue as high priority.
     */
    existingHighPriorityIssue?: outputs.IssueAlertConditionsV2ExistingHighPriorityIssue;
    /**
     * A new issue is created.
     */
    firstSeenEvent?: outputs.IssueAlertConditionsV2FirstSeenEvent;
    /**
     * Sentry marks a new issue as high priority.
     */
    newHighPriorityIssue?: outputs.IssueAlertConditionsV2NewHighPriorityIssue;
    /**
     * The issue changes state from ignored to unresolved.
     */
    reappearedEvent?: outputs.IssueAlertConditionsV2ReappearedEvent;
    /**
     * The issue changes state from resolved to unresolved.
     */
    regressionEvent?: outputs.IssueAlertConditionsV2RegressionEvent;
}

export interface IssueAlertConditionsV2EventFrequency {
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    comparisonInterval?: string;
    /**
     * Valid values are: `count`, and `percent`.
     */
    comparisonType: string;
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `1m`, `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    interval?: string;
    name: string;
    value: number;
}

export interface IssueAlertConditionsV2EventFrequencyPercent {
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    comparisonInterval?: string;
    /**
     * Valid values are: `count`, and `percent`.
     */
    comparisonType: string;
    /**
     * `m` for minutes, `h` for hours. Valid values are: `5m`, `10m`, `30m`, and `1h`.
     */
    interval: string;
    name: string;
    value: number;
}

export interface IssueAlertConditionsV2EventUniqueUserFrequency {
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    comparisonInterval?: string;
    /**
     * Valid values are: `count`, and `percent`.
     */
    comparisonType: string;
    /**
     * `m` for minutes, `h` for hours, `d` for days, and `w` for weeks. Valid values are: `1m`, `5m`, `15m`, `1h`, `1d`, `1w`, and `30d`.
     */
    interval?: string;
    name: string;
    value: number;
}

export interface IssueAlertConditionsV2ExistingHighPriorityIssue {
    name: string;
}

export interface IssueAlertConditionsV2FirstSeenEvent {
    name: string;
}

export interface IssueAlertConditionsV2NewHighPriorityIssue {
    name: string;
}

export interface IssueAlertConditionsV2ReappearedEvent {
    name: string;
}

export interface IssueAlertConditionsV2RegressionEvent {
    name: string;
}

export interface IssueAlertFiltersV2 {
    /**
     * The issue is older or newer than `value` `time`.
     */
    ageComparison?: outputs.IssueAlertFiltersV2AgeComparison;
    /**
     * The issue is assigned to no one, team, or member.
     */
    assignedTo?: outputs.IssueAlertFiltersV2AssignedTo;
    /**
     * The event's `attribute` value `match` `value`.
     */
    eventAttribute?: outputs.IssueAlertFiltersV2EventAttribute;
    /**
     * The issue's category is equal to `value`.
     */
    issueCategory?: outputs.IssueAlertFiltersV2IssueCategory;
    /**
     * The issue has happened at least `value` times (Note: this is approximate).
     */
    issueOccurrences?: outputs.IssueAlertFiltersV2IssueOccurrences;
    /**
     * The {oldest_or_newest} adopted release associated with the event's issue is {older_or_newer} than the latest adopted release in {environment}.
     */
    latestAdoptedRelease?: outputs.IssueAlertFiltersV2LatestAdoptedRelease;
    /**
     * The event is from the latest release.
     */
    latestRelease?: outputs.IssueAlertFiltersV2LatestRelease;
    /**
     * The event's level is `match` `level`.
     */
    level?: outputs.IssueAlertFiltersV2Level;
    /**
     * The event's tags match `key` `match` `value`.
     */
    taggedEvent?: outputs.IssueAlertFiltersV2TaggedEvent;
}

export interface IssueAlertFiltersV2AgeComparison {
    /**
     * Valid values are: `older`, and `newer`.
     */
    comparisonType: string;
    name: string;
    /**
     * Valid values are: `minute`, `hour`, `day`, and `week`.
     */
    time: string;
    value: number;
}

export interface IssueAlertFiltersV2AssignedTo {
    name: string;
    /**
     * The target's ID. Only required when `target_type` is `Team` or `Member`.
     */
    targetIdentifier?: string;
    /**
     * Valid values are: `Unassigned`, `Team`, and `Member`.
     */
    targetType: string;
}

export interface IssueAlertFiltersV2EventAttribute {
    /**
     * Valid values are: `message`, `platform`, `environment`, `type`, `error.handled`, `error.unhandled`, `error.main_thread`, `exception.type`, `exception.value`, `user.id`, `user.email`, `user.username`, `user.ip_address`, `http.method`, `http.url`, `http.status_code`, `sdk.name`, `stacktrace.code`, `stacktrace.module`, `stacktrace.filename`, `stacktrace.abs_path`, `stacktrace.package`, `unreal.crashtype`, `app.in_foreground`, `os.distribution_name`, and `os.distribution_version`.
     */
    attribute: string;
    /**
     * The comparison operator. Valid values are: `CONTAINS`, `ENDS_WITH`, `EQUAL`, `GREATER_OR_EQUAL`, `GREATER`, `IS_SET`, `IS_IN`, `LESS_OR_EQUAL`, `LESS`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUAL`, `NOT_SET`, `NOT_STARTS_WITH`, `NOT_IN`, and `STARTS_WITH`.
     */
    match: string;
    name: string;
    value?: string;
}

export interface IssueAlertFiltersV2IssueCategory {
    name: string;
    /**
     * Valid values are: `Error`, `Performance`, `Profile`, `Cron`, `Replay`, `Feedback`, `Uptime`, and `Metric_Alert`.
     */
    value: string;
}

export interface IssueAlertFiltersV2IssueOccurrences {
    name: string;
    value: number;
}

export interface IssueAlertFiltersV2LatestAdoptedRelease {
    environment: string;
    name: string;
    /**
     * Valid values are: `older`, and `newer`.
     */
    olderOrNewer: string;
    /**
     * Valid values are: `oldest`, and `newest`.
     */
    oldestOrNewest: string;
}

export interface IssueAlertFiltersV2LatestRelease {
    name: string;
}

export interface IssueAlertFiltersV2Level {
    /**
     * Valid values are: `sample`, `debug`, `info`, `warning`, `error`, and `fatal`.
     */
    level: string;
    /**
     * The comparison operator. Valid values are: `EQUAL`, `GREATER_OR_EQUAL`, and `LESS_OR_EQUAL`.
     */
    match: string;
    name: string;
}

export interface IssueAlertFiltersV2TaggedEvent {
    /**
     * The tag.
     */
    key: string;
    /**
     * The comparison operator. Valid values are: `CONTAINS`, `ENDS_WITH`, `EQUAL`, `GREATER_OR_EQUAL`, `GREATER`, `IS_SET`, `IS_IN`, `LESS_OR_EQUAL`, `LESS`, `NOT_CONTAINS`, `NOT_ENDS_WITH`, `NOT_EQUAL`, `NOT_SET`, `NOT_STARTS_WITH`, `NOT_IN`, and `STARTS_WITH`.
     */
    match: string;
    name: string;
    value?: string;
}

export interface KeyJavascriptLoaderScript {
    /**
     * The version of the browser SDK to load.
     */
    browserSdkVersion: string;
    /**
     * Whether debug bundles & logging are enabled for this key.
     */
    debugEnabled: boolean;
    /**
     * Whether performance monitoring is enabled for this key.
     */
    performanceMonitoringEnabled: boolean;
    /**
     * Whether session replay is enabled for this key.
     */
    sessionReplayEnabled: boolean;
}

export interface MetricAlertTrigger {
    actions: outputs.MetricAlertTriggerAction[];
    alertThreshold: number;
    /**
     * The ID of the trigger.
     */
    id: string;
    label: string;
    resolveThreshold: number;
    thresholdType: number;
}

export interface MetricAlertTriggerAction {
    /**
     * The ID of the action.
     */
    id: string;
    /**
     * Slack channel ID to avoid rate-limiting, see [here](https://docs.sentry.io/product/integrations/notification-incidents/slack/#rate-limiting-error)
     */
    inputChannelId?: string;
    integrationId?: number;
    targetIdentifier?: string;
    targetType: string;
    type: string;
}

export interface ProjectClientSecurity {
    /**
     * A list of allowed domains. Examples: https://example.com, *, *.example.com, *:80.
     */
    allowedDomains: string[];
    /**
     * Enable JavaScript source fetching. Allow Sentry to scrape missing JavaScript source context when possible.
     */
    scrapeJavascript: boolean;
    /**
     * Security Token. Outbound requests matching Allowed Domains will have the header "{security_token_header}: {security_token}" appended.
     */
    securityToken: string;
    /**
     * Security Token Header. Outbound requests matching Allowed Domains will have the header "{security_token_header}: {security_token}" appended.
     */
    securityTokenHeader: string;
    /**
     * Verify TLS/SSL. Outbound requests will verify TLS (sometimes known as SSL) connections.
     */
    verifyTlsSsl: boolean;
}

export interface ProjectFilters {
    /**
     * Filter events from these IP addresses. (e.g. 127.0.0.1 or 10.0.0.0/8)
     */
    blacklistedIps: string[];
    /**
     * Filter events by error messages. Allows [glob pattern matching](https://en.wikipedia.org/wiki/Glob_(programming)). (e.g. TypeError* or *: integer division or modulo by zero)
     */
    errorMessages: string[];
    /**
     * Filter events from these releases. Allows [glob pattern matching](https://en.wikipedia.org/wiki/Glob_(programming)). (e.g. 1.* or [!3].[0-9].*)
     */
    releases: string[];
}

export interface ProjectSymbolSourceLayout {
    /**
     * The casing of the symbol source layout. The layout of the folder structure. The options are: `default` - Default (mixed case), `uppercase` - Uppercase, `lowercase` - Lowercase.
     */
    casing: string;
    /**
     * The layout of the folder structure. The options are: `native` - Platform-Specific (SymStore / GDB / LLVM), `symstore` - Microsoft SymStore, `symstore_index2` - Microsoft SymStore (with index2.txt), `ssqp` - Microsoft SSQP, `unified` - Unified Symbol Server Layout, `debuginfod` - debuginfod.
     */
    type: string;
}

