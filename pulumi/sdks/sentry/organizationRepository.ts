// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class OrganizationRepository extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationRepositoryState, opts?: pulumi.CustomResourceOptions): OrganizationRepository {
        return new OrganizationRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/organizationRepository:OrganizationRepository';

    /**
     * Returns true if the given object is an instance of OrganizationRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationRepository.__pulumiType;
    }

    /**
     * The identifier of the repository. For GitHub, GitLab and BitBucket, it is `{organization}/{repository}`. For VSTS, it is
     * the [repository
     * ID](https://learn.microsoft.com/en-us/rest/api/azure/devops/git/repositories/get#get-a-repository-by-repositoryid).
     */
    public readonly identifier!: pulumi.Output<string>;
    /**
     * The ID of the organization integration. Source from the URL
     * `https://<organization>.sentry.io/settings/integrations/<integration-type>/<integration-id>/` or use the
     * `sentry.getOrganizationIntegration` data source.
     */
    public readonly integrationId!: pulumi.Output<string>;
    /**
     * The type of the organization integration. Supported values are `github`, `github_enterprise`, `gitlab`, `vsts` (Azure
     * DevOps), `bitbucket`, and `bitbucket_server`.
     */
    public readonly integrationType!: pulumi.Output<string>;
    /**
     * The organization of this resource.
     */
    public readonly organization!: pulumi.Output<string>;

    /**
     * Create a OrganizationRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationRepositoryArgs | OrganizationRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationRepositoryState | undefined;
            resourceInputs["identifier"] = state ? state.identifier : undefined;
            resourceInputs["integrationId"] = state ? state.integrationId : undefined;
            resourceInputs["integrationType"] = state ? state.integrationType : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
        } else {
            const args = argsOrState as OrganizationRepositoryArgs | undefined;
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.integrationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationId'");
            }
            if ((!args || args.integrationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationType'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["identifier"] = args ? args.identifier : undefined;
            resourceInputs["integrationId"] = args ? args.integrationId : undefined;
            resourceInputs["integrationType"] = args ? args.integrationType : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationRepository.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering OrganizationRepository resources.
 */
export interface OrganizationRepositoryState {
    /**
     * The identifier of the repository. For GitHub, GitLab and BitBucket, it is `{organization}/{repository}`. For VSTS, it is
     * the [repository
     * ID](https://learn.microsoft.com/en-us/rest/api/azure/devops/git/repositories/get#get-a-repository-by-repositoryid).
     */
    identifier?: pulumi.Input<string>;
    /**
     * The ID of the organization integration. Source from the URL
     * `https://<organization>.sentry.io/settings/integrations/<integration-type>/<integration-id>/` or use the
     * `sentry.getOrganizationIntegration` data source.
     */
    integrationId?: pulumi.Input<string>;
    /**
     * The type of the organization integration. Supported values are `github`, `github_enterprise`, `gitlab`, `vsts` (Azure
     * DevOps), `bitbucket`, and `bitbucket_server`.
     */
    integrationType?: pulumi.Input<string>;
    /**
     * The organization of this resource.
     */
    organization?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationRepository resource.
 */
export interface OrganizationRepositoryArgs {
    /**
     * The identifier of the repository. For GitHub, GitLab and BitBucket, it is `{organization}/{repository}`. For VSTS, it is
     * the [repository
     * ID](https://learn.microsoft.com/en-us/rest/api/azure/devops/git/repositories/get#get-a-repository-by-repositoryid).
     */
    identifier: pulumi.Input<string>;
    /**
     * The ID of the organization integration. Source from the URL
     * `https://<organization>.sentry.io/settings/integrations/<integration-type>/<integration-id>/` or use the
     * `sentry.getOrganizationIntegration` data source.
     */
    integrationId: pulumi.Input<string>;
    /**
     * The type of the organization integration. Supported values are `github`, `github_enterprise`, `gitlab`, `vsts` (Azure
     * DevOps), `bitbucket`, and `bitbucket_server`.
     */
    integrationType: pulumi.Input<string>;
    /**
     * The organization of this resource.
     */
    organization: pulumi.Input<string>;
}
