// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class IssueAlert extends pulumi.CustomResource {
    /**
     * Get an existing IssueAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IssueAlertState, opts?: pulumi.CustomResourceOptions): IssueAlert {
        return new IssueAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sentry:index/issueAlert:IssueAlert';

    /**
     * Returns true if the given object is an instance of IssueAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IssueAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IssueAlert.__pulumiType;
    }

    /**
     * Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen. Valid values
     * are: `all`, and `any`.
     */
    public readonly actionMatch!: pulumi.Output<string>;
    /**
     * **Deprecated** in favor of `actions_v2`. A list of actions that take place when all required conditions and filters for
     * the rule are met. In JSON string format.
     *
     * @deprecated Deprecated
     */
    public readonly actions!: pulumi.Output<string | undefined>;
    /**
     * A list of actions that take place when all required conditions and filters for the rule are met.
     */
    public readonly actionsV2s!: pulumi.Output<outputs.IssueAlertActionsV2[] | undefined>;
    /**
     * **Deprecated** in favor of `conditions_v2`. A list of triggers that determine when the rule fires. In JSON string
     * format.
     *
     * @deprecated Deprecated
     */
    public readonly conditions!: pulumi.Output<string | undefined>;
    /**
     * A list of triggers that determine when the rule fires.
     */
    public readonly conditionsV2s!: pulumi.Output<outputs.IssueAlertConditionsV2[] | undefined>;
    /**
     * Perform issue alert in a specific environment.
     */
    public readonly environment!: pulumi.Output<string | undefined>;
    /**
     * A string determining which filters need to be true before any actions take place. Required when a value is provided for
     * `filters`. Valid values are: `all`, `any`, and `none`.
     */
    public readonly filterMatch!: pulumi.Output<string | undefined>;
    /**
     * **Deprecated** in favor of `filters_v2`. A list of filters that determine if a rule fires after the necessary conditions
     * have been met. In JSON string format.
     *
     * @deprecated Deprecated
     */
    public readonly filters!: pulumi.Output<string | undefined>;
    /**
     * A list of filters that determine if a rule fires after the necessary conditions have been met.
     */
    public readonly filtersV2s!: pulumi.Output<outputs.IssueAlertFiltersV2[] | undefined>;
    /**
     * Perform actions at most once every `X` minutes for this issue.
     */
    public readonly frequency!: pulumi.Output<number>;
    /**
     * The issue alert name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization of this resource.
     */
    public readonly organization!: pulumi.Output<string>;
    /**
     * The ID of the team or user that owns the rule.
     */
    public readonly owner!: pulumi.Output<string | undefined>;
    /**
     * The project of this resource.
     */
    public readonly project!: pulumi.Output<string>;

    /**
     * Create a IssueAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IssueAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IssueAlertArgs | IssueAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IssueAlertState | undefined;
            resourceInputs["actionMatch"] = state ? state.actionMatch : undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["actionsV2s"] = state ? state.actionsV2s : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["conditionsV2s"] = state ? state.conditionsV2s : undefined;
            resourceInputs["environment"] = state ? state.environment : undefined;
            resourceInputs["filterMatch"] = state ? state.filterMatch : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["filtersV2s"] = state ? state.filtersV2s : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organization"] = state ? state.organization : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
        } else {
            const args = argsOrState as IssueAlertArgs | undefined;
            if ((!args || args.actionMatch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionMatch'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.organization === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["actionMatch"] = args ? args.actionMatch : undefined;
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["actionsV2s"] = args ? args.actionsV2s : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["conditionsV2s"] = args ? args.conditionsV2s : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["filterMatch"] = args ? args.filterMatch : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["filtersV2s"] = args ? args.filtersV2s : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization"] = args ? args.organization : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IssueAlert.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering IssueAlert resources.
 */
export interface IssueAlertState {
    /**
     * Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen. Valid values
     * are: `all`, and `any`.
     */
    actionMatch?: pulumi.Input<string>;
    /**
     * **Deprecated** in favor of `actions_v2`. A list of actions that take place when all required conditions and filters for
     * the rule are met. In JSON string format.
     *
     * @deprecated Deprecated
     */
    actions?: pulumi.Input<string>;
    /**
     * A list of actions that take place when all required conditions and filters for the rule are met.
     */
    actionsV2s?: pulumi.Input<pulumi.Input<inputs.IssueAlertActionsV2>[]>;
    /**
     * **Deprecated** in favor of `conditions_v2`. A list of triggers that determine when the rule fires. In JSON string
     * format.
     *
     * @deprecated Deprecated
     */
    conditions?: pulumi.Input<string>;
    /**
     * A list of triggers that determine when the rule fires.
     */
    conditionsV2s?: pulumi.Input<pulumi.Input<inputs.IssueAlertConditionsV2>[]>;
    /**
     * Perform issue alert in a specific environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * A string determining which filters need to be true before any actions take place. Required when a value is provided for
     * `filters`. Valid values are: `all`, `any`, and `none`.
     */
    filterMatch?: pulumi.Input<string>;
    /**
     * **Deprecated** in favor of `filters_v2`. A list of filters that determine if a rule fires after the necessary conditions
     * have been met. In JSON string format.
     *
     * @deprecated Deprecated
     */
    filters?: pulumi.Input<string>;
    /**
     * A list of filters that determine if a rule fires after the necessary conditions have been met.
     */
    filtersV2s?: pulumi.Input<pulumi.Input<inputs.IssueAlertFiltersV2>[]>;
    /**
     * Perform actions at most once every `X` minutes for this issue.
     */
    frequency?: pulumi.Input<number>;
    /**
     * The issue alert name.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization of this resource.
     */
    organization?: pulumi.Input<string>;
    /**
     * The ID of the team or user that owns the rule.
     */
    owner?: pulumi.Input<string>;
    /**
     * The project of this resource.
     */
    project?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IssueAlert resource.
 */
export interface IssueAlertArgs {
    /**
     * Trigger actions when an event is captured by Sentry and `any` or `all` of the specified conditions happen. Valid values
     * are: `all`, and `any`.
     */
    actionMatch: pulumi.Input<string>;
    /**
     * **Deprecated** in favor of `actions_v2`. A list of actions that take place when all required conditions and filters for
     * the rule are met. In JSON string format.
     *
     * @deprecated Deprecated
     */
    actions?: pulumi.Input<string>;
    /**
     * A list of actions that take place when all required conditions and filters for the rule are met.
     */
    actionsV2s?: pulumi.Input<pulumi.Input<inputs.IssueAlertActionsV2>[]>;
    /**
     * **Deprecated** in favor of `conditions_v2`. A list of triggers that determine when the rule fires. In JSON string
     * format.
     *
     * @deprecated Deprecated
     */
    conditions?: pulumi.Input<string>;
    /**
     * A list of triggers that determine when the rule fires.
     */
    conditionsV2s?: pulumi.Input<pulumi.Input<inputs.IssueAlertConditionsV2>[]>;
    /**
     * Perform issue alert in a specific environment.
     */
    environment?: pulumi.Input<string>;
    /**
     * A string determining which filters need to be true before any actions take place. Required when a value is provided for
     * `filters`. Valid values are: `all`, `any`, and `none`.
     */
    filterMatch?: pulumi.Input<string>;
    /**
     * **Deprecated** in favor of `filters_v2`. A list of filters that determine if a rule fires after the necessary conditions
     * have been met. In JSON string format.
     *
     * @deprecated Deprecated
     */
    filters?: pulumi.Input<string>;
    /**
     * A list of filters that determine if a rule fires after the necessary conditions have been met.
     */
    filtersV2s?: pulumi.Input<pulumi.Input<inputs.IssueAlertFiltersV2>[]>;
    /**
     * Perform actions at most once every `X` minutes for this issue.
     */
    frequency: pulumi.Input<number>;
    /**
     * The issue alert name.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization of this resource.
     */
    organization: pulumi.Input<string>;
    /**
     * The ID of the team or user that owns the rule.
     */
    owner?: pulumi.Input<string>;
    /**
     * The project of this resource.
     */
    project: pulumi.Input<string>;
}
